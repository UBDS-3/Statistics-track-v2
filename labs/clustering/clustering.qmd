---
title: "Clustering"
author: "Bio Data Science^3 faculty"
date: "July 19 - August 2, 2025"
format:
  html:
    code-fold: false
    code-tools: true
    embed-resources: true
    highlight-style: github
    toc: true
    code-line-numbers: false
params:
  answers:    false
  simplified: false
---

```{r}
#| label: initialize
#| echo: FALSE
#| include: FALSE
options("scipen"=100, "digits"=4)
knitr::opts_chunk$set(
    eval  = params$answers,
    echo  = params$answers,
    message = FALSE,
    warning = FALSE,
    fig.width=15, fig.height=8, fig.align="center", fig.pos="h"
)
set.seed(533)
```
# Preamble

## Goal

In this lab we will learn the basics of clustering. The methods we will
cover include hierarchical clustering, K means and density clustering.

## Dependencies

```{r }
#| eval: true
#| echo: true
# load required packages
library(pheatmap)
library(ggfortify)
library(tidyverse)
```

## Data retrieval

The Morder data are gene expression measurements for 156 genes on T cells
of 3 types (naïve, effector, memory) from 10 patients (Holmes et al. 2005).

Here we load the `Morder` `data.frame` from the online directory.

```{r }
#| label: loadDataWeb
#| eval: false
#| echo: true
load(url("http://web.stanford.edu/class/bios221/data/Morder.RData"))
# if download fails with timeout
# error, try increasing it via:
# options(timeout = 1000)
```

If you downloaded the file before, you can load it from the local directory.

```{r }
#| label: loadDataLoc
#| echo: true
#| eval: true
load("Morder.RData")
```

# Hierarchical clustering

::: {.callout-note collapse="false"}

## Question

Inspect the data. How many samples of each T cell type
(naïve, effector, memory) are there in the data?

```{r }
#| label: questionCellTypesHint
#| eval: false
#| echo: !expr params$simplified
# Fill in the blanks to complete the code and answer the question above

________(Morder) |>
  stringr::___________("_", _) |>
  _____()

# Hints:
# 1. What function extracts the row names?
# 2. What function splits the string, and which position (number) corresponds
# to the name of a cell type?
# 3. What function creates a frequency table from a vector?
```

```{r}
#| label: questionCellTypesSolution
rownames(Morder) |>
  stringr::str_split_i("_", 2) |>
  table()
```

:::

In base R the function to perform hierarchical clustering is `hclust`.
To cluster the genes with hierarchical clustering you first need
to compute a distance matrix storing all pairwise (gene-to-gene)
dissimilarities. This is how to do it:

```{r}
#| label: hclustGenes
#| eval: true
#| echo: true
#| fig.width: 18
#| fig.height: 8
# distance calculation
D = dist(t(Morder))
# clustering
gene_clust = hclust(d = D)
# plot dendrogram
plot(gene_clust)
```

::: {.callout-note collapse="false"}

## Question

Why in the provided code the input to `dist` function is `t(Morder)`?

```{r}
#| label: questionTranspose
#| echo: false
#| results: 'asis'
cat(
  "Because `dist` computes distances between rows, we need to use `t` to transposes the expression matrix Morder, so that we cluster genes, and not samples."
)
```

:::

In hierarchical clustering, one needs to choose the method
for agglomerating the clusters. By default `hclust`,
uses a "complete" linkage method (see `?hclust` for info).

::: {.callout-note collapse="false"}

## Question

Redo hierarchical clustering with the `ward.D2` method and plot the dendrogram.

```{r }
#| label: hclustGenesWard.D2Hint
#| eval: false
#| echo: !expr params$simplified
# Fill in the blanks to complete the code and answer the question above

gene_clust_wd2 = ______(d = ____(_(______)), ______ = "_______")
____(gene_clust_wd2)

# Hints:
# ...
```

```{r}
#| label: hclustGenesWard.D2Solution
gene_clust_wd2 = hclust(d = dist(t(Morder)), method = "ward.D2")
plot(gene_clust_wd2)
```

Notice that the values on the y axis of hclust dendrogram changed.
What do they correspond to?

```{r}
#| label: hclust_genes_ward.D2_dend
#| echo: false
#| results: 'asis'
cat(
  "Distance between clusters, according to agglomeration method choice."
)
```

:::

Note that in the `hclust` there are the `ward.D` and `ward.D2` methods available.
Please call `?hclust` to read about the difference between the two methods.

Next, instead of clustering genes, we will apply
hierarchical clustering for samples (observations).

::: {.callout-note collapse="false"}

## Question

Use dist and hclust (with default linkage method) to cluster samples.

```{r }
#| label: hclustSamplesHint
#| eval: false
#| echo: !expr params$simplified
# Fill in the blanks to complete the code and answer the question above

D_samples = ____(______)
sample_clust = ______(_ = D_samples)

# Hints:
# 1. Do we need to transpose the matrix?
```

```{r}
#| label: hclustSamplesSolution
# we don't transpose the matrix now (samples are rows)
D_samples = dist(Morder)
sample_clust = hclust(d = D_samples)
```

How many clusters of samples are there at the dendrogram height of 12?
Hint: the `abline()` and `cutree()` functions might be helpful.

```{r }
#| label: hclustSamplesAblineHint
#| eval: false
#| echo: !expr params$simplified
# Fill in the blanks to complete the code and answer the question above

____(sample_clust)
______(a=12, b=0, col="blue")

clusts <- ______(sample_clust, _ = __)
_____(clusts)

# Hints:
# ...
```

```{r}
#| label: hclustSamplesAblineSolution
plot(sample_clust)
abline(a=12, b=0, col="blue")

clusts <- cutree(sample_clust, h = 12)
table(clusts)
```

```{r}
#| label: hclustSamplesAblineAnswer
#| echo: false
#| results: 'asis'
cat(sprintf(
  "We see %g clusters at the height of 12",
  cutree(sample_clust, h=12) |> unique() |> length()
))
```

:::

Now that you know how to perform hierarchical clustering,
use `pheatmap` to generate a heatmap with clustered rows and columns.
Below, we do some extra work compared to the default parameters to make
sure that 0 is in the center of the color scale, and use beautiful colors.

```{r}
#| label: pheatmap
#| eval: true
#| echo: true
#| fig.height: 6
#| fig.width: 10
library("pheatmap")
mycolors = colorRampPalette(c("#FFD800", "#0056B9"))(100)
pheatmap(
  mat = Morder,
  fontsize_col = 5, fontsize_row = 10,
  color = mycolors,
  breaks = max(abs(Morder)) * seq(-1, +1, length.out = length(mycolors) + 1)
)
```

::: {.callout-note collapse="false"}

## Question

What type of distance and which clustering method does
`pheatmap` use by default for clustering rows and columns?

```{r}
#| label: pheatmapDefaultDistanceSolution
#| echo: false
#| results: 'asis'
cat(
  "Euclidean distance and complete linkage clustering (see `?pheatmap`)"
)
```

Note that these are default values for `dist` and `hclust`, too.
Look at how clustering heatmap changes if you use different
distance and clustering methods (e.g. 'ward.D2').

```{r }
#| label: pheatmapWd2Hint
#| eval: false
#| echo: !expr params$simplified
#| fig.height: 6
#| fig.width: 10
# Fill in the blanks to complete the code and answer the question above

# cluster genes
gene_clust_wd2 = ______(_ = ____(_(______)), ______ = "_______")

# cluster samples
sample_clust_wd2 = ______(_ = ____(______), ______ = "_______")

# order expression matrix by clustering results
Morder_clustered = Morder[sample_clust_wd2$order, gene_clust_wd2$order]

# we use pre-computed clustering, so we need to specify that pheatmap should not
# re-cluster the input data
pheatmap(
  mat = ________________,
  cluster_rows = FALSE, cluster_cols = FALSE,
  fontsize_col = 5, fontsize_row = 10,
  color = mycolors,
  breaks = max(abs(Morder)) * seq(-1, +1, length.out = length(mycolors) + 1)
)

# Hints:
# ...
```

```{r}
#| label: pheatmapWd2Solution
#| fig.height: 6
#| fig.width: 10
# cluster genes
gene_clust_wd2 = hclust(d = dist(t(Morder)), method = "ward.D2")

# cluster samples
sample_clust_wd2 = hclust(d = dist(Morder), method = "ward.D2")

# order expression matrix by clustering results
Morder_clustered = Morder[sample_clust_wd2$order, gene_clust_wd2$order]

# we use pre-computed clustering, so we need to specify that pheatmap should not
# re-cluster the input data
pheatmap(
  mat = Morder_clustered,
  cluster_rows = FALSE, cluster_cols = FALSE,
  fontsize_col = 5, fontsize_row = 10,
  color = mycolors,
  breaks = max(abs(Morder)) * seq(-1, +1, length.out = length(mycolors) + 1)
)
```

:::

# K means

Next we will do k-means clustering on the same dataset.
First thing we need to do is select the number of clusters.
In this dataset, we expect to have three clusters (naïve, effector, memory T cells).
We will use the `kmeans` function to cluster the data into 3 groups.

```{r}
#| label: kmeans
#| eval: true
#| echo: true
# convert to data.frame
Morder_df <- as.data.frame(Morder)

# add cell type  column - wee will use this for plotting
Morder_df$cell_type <- stringr::str_extract(rownames(Morder), "EFF|MEM|NAI")
Morder_df$condition <- stringr::str_extract(rownames(Morder), "HEA|MEL")

# k means
#set.seed(1234) # already set in the preamble
km <- kmeans(x = Morder[, -match(c("cell_type","condition"), colnames(Morder_df))], centers = 3)

# we can visualize the results
autoplot(km, Morder_df, frame = TRUE, size = 4, alpha = 0.6) + coord_equal()
```

::: {.callout-note collapse="false"}

## Question

Check how different cell types are distributed in the three clusters,
i.e. are the samples clustering by the cell types?
Hint: use "shape" argument of the `autoplot` function to indicate cell types.

```{r }
#| label: kmeansCellTypesHint
#| eval: false
#| echo: !expr params$simplified
# Fill in the blanks to complete the code and answer the question above

________(km, Morder_df, frame = TRUE,  _____ = "_________", size = 4, alpha = 0.6) + coord_equal()

# Hints:
# ...
```

```{r}
#| label: kmeansCellTypesSolution

autoplot(km, Morder_df, frame = TRUE,  shape = "cell_type", size = 4, alpha = 0.6) + coord_equal()
```

:::

::: {.callout-note collapse="false"}

## Question

Notice that one cluster contains samples from different cell types.
If you repeat k means with k=4, do they separate?

```{r }
#| label: kmeans4Hint
#| eval: false
#| echo: !expr params$simplified
# Fill in the blanks to complete the code and answer the question above

km <- kmeans(x = Morder_df[, -match(c("cell_type","condition"), colnames(Morder_df))], _______ = _)
# plot
autoplot(km, Morder_df, frame = TRUE, _____ = "_________", size = 4, alpha = 0.6)

# Hints:
# ...
```

```{r}
#| label: kmeans4Solution
# k means
km <- kmeans(x = Morder_df[, -match(c("cell_type","condition"), colnames(Morder_df))], centers = 4)
# plot
autoplot(km, Morder_df, frame = TRUE, shape = "cell_type", size = 4, alpha = 0.6)
```

:::

::: {.callout-note collapse="false"}

## Question

The data are coming from two conditions: healthy and melanoma. Repeat k-means
clustering with k=2 and see if the clusters now correspond to these conditions?

```{r }
#| label: kmeans2Hint
#| eval: false
#| echo: !expr params$simplified
# Fill in the blanks to complete the code and answer the question above

km <- kmeans(x = Morder_df[, -match(c("cell_type","condition"), colnames(Morder_df))], _______ = _)
# plot
autoplot(km, Morder_df, frame = TRUE, _____ = "_________", size = 4, alpha = 0.6)

# Hints:
# ...
```

```{r}
#| label: kmeans2Solution
# k means
km <- kmeans(x = Morder[, -match(c("cell_type","condition"), colnames(Morder_df))], centers = 2)
# plot
autoplot(km, Morder_df, frame = TRUE, shape = "condition", size = 4, alpha = 0.6)
```

:::

Choosing the number of clusters for k-means is important and at the same time
not trivial, because usually we don't know the number of clusters in the data
_a priori_.

How can we choose appropriate value of `k`?
One way to choose the number of clusters is to use of the "wss"
(within sum of squares) statistic.

`kmeans()` function reports wss for every cluster in the results (check
`km$withinss`). Here we implement the function that computes the wss statistic
for different number of clusters in kmeans.

```{r}
#| label: wssPlot
#| eval: true
#| echo: true
#| fig.width: 6
#| fig.height: 6

wssplot <- function(data, nc=10, seed=533){
  wss <- (nrow(data)-1)*sum(apply(data,2,var))
  print(wss)
  for (i in 2:nc){
    set.seed(seed)
    wss[i] <- sum(kmeans(data, centers=i)$withinss)}
  plot(1:nc, wss, type="b", xlab="Number of Clusters",
       ylab="Within groups sum of squares")
  wss
}
```

Inspect how `wss` looks for different number of clusters in our `Morder` data.

```{r}
#| eval: true
#| echo: true
wssplot(Morder)
```

Within sum of squares (wss) statistic, we see that the last substantial decrease of the
statistic occurres before $k=3$, and for values $k=4,5,6,\dots$ the quantity 'levels-off'.
In practice, we would choose $k=3$, a value happening at the 'elbow' of the plot (elbow-rule).

# Session info

```{r}
#| label: sessionInfo
#| eval: true
#| echo: true
sessionInfo()
```
